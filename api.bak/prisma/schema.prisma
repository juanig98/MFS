generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id                 Int               @id @default(autoincrement())
  description        String            @db.VarChar(100)
  slug               String            @db.VarChar(150)
  observations       String?           @db.Text
  status             Int               @default(1) @db.TinyInt
  createdAt          DateTime?         @default(now()) @db.Timestamp(0)
  updatedAt          DateTime?         @default(now()) @db.Timestamp(0)
  productsCategories ProductCategory[]

  @@map("categories")
}

model Image {
  id             BigInt         @id @default(autoincrement())
  productId      BigInt
  filename       String?        @db.VarChar(50)
  type           String?        @db.Char(5)
  description    String?        @db.VarChar(50)
  base64         Bytes          @db.Blob
  createdAt      DateTime?      @default(now()) @db.Timestamp(0)
  updatedAt      DateTime?      @default(now()) @db.Timestamp(0)
  productsImages ProductImage[]

  @@map("images")
}

model Product {
  id                 BigInt            @id @default(autoincrement())
  title              String            @db.VarChar(100)
  slug               String            @unique(map: "slug") @db.VarChar(150)
  description        String?           @db.VarChar(512)
  priceCost          Decimal           @default(0.00) @db.Decimal(18, 2)
  pricePublic        Decimal           @default(0.00) @db.Decimal(18, 2)
  status             Int               @default(1) @db.TinyInt
  observations       String?           @db.Text
  createdAt          DateTime?         @default(now()) @db.Timestamp(0)
  updatedAt          DateTime?         @default(now()) @db.Timestamp(0)
  productsCategories ProductCategory[]
  productsImages     ProductImage[]
  productsSizes      ProductSize[]

  @@map("products")
}

model ProductCategory {
  productId  BigInt
  categoryId Int
  createdAt  DateTime? @default(now()) @db.Timestamp(0)
  updatedAt  DateTime? @default(now()) @db.Timestamp(0)
  products   Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ProductCategory")
  categories Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ProductCategory_ibfk_2")

  @@id([productId, categoryId])
  @@index([categoryId], map: "categoryId")
  @@map("productsCategories")
}

model ProductImage {
  productId BigInt
  imageId   BigInt
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  products  Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ProductImage_ibfk_1")
  images    Image     @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ProductImage_ibfk_2")

  @@id([productId, imageId])
  @@index([imageId], map: "imageId")
  @@map("productsImage")
}

model ProductSize {
  productId BigInt
  sizeId    Int
  value     String    @db.VarChar(50)
  createdAt DateTime? @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  products  Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "products_sizes_ibfk_1")
  sizes     sizes     @relation(fields: [sizeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "products_sizes_ibfk_2")

  @@id([productId, sizeId])
  @@index([sizeId], map: "sizeId")
  @@map("productsSizes")
}

model sizes {
  id            Int           @id
  description   String        @db.VarChar(100)
  type          SizesType?    @default(number)
  maximum       Decimal?      @db.Decimal(18, 2)
  minimum       Decimal?      @db.Decimal(18, 2)
  suffix        String?       @db.Char(10)
  prefix        String?       @db.Char(10)
  observations  String?       @db.Text
  createdAt     DateTime?     @default(now()) @db.Timestamp(0)
  updatedAt     DateTime?     @default(now()) @db.Timestamp(0)
  productsSizes ProductSize[]

  @@map("sizes")
}

model User {
  id           Int       @id
  username     String    @unique(map: "username") @db.VarChar(50)
  password     String    @db.VarChar(100)
  email        String    @unique(map: "email") @db.VarChar(100)
  observations String?   @db.Text
  status       Int       @default(1) @db.TinyInt
  createdAt    DateTime? @default(now()) @db.Timestamp(0)
  updatedAt    DateTime? @default(now()) @db.Timestamp(0)

  @@map("users")
}

enum SizesType {
  text
  number
}
